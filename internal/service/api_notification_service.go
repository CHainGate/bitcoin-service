/*
 * OpenAPI bitcoin service
 *
 * This is the OpenAPI definition of the bitcoin service.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package service

import (
	"context"
	"errors"
	"fmt"
	"github.com/CHainGate/backend/pkg/enum"
	"net/http"

	"github.com/CHainGate/bitcoin-service/openApi"
)

// NotificationApiService is a service that implements the logic for the NotificationApiServicer
// This service should implement the business logic for every endpoint for the NotificationApi API.
// Include any external packages or services that will be required by this service.
type NotificationApiService struct {
	bitcoinService IBitcoinService
}

// NewNotificationApiService creates a default api service
func NewNotificationApiService(bitcoinService IBitcoinService) openApi.NotificationApiServicer {
	return &NotificationApiService{bitcoinService}
}

// BlockNotify - New block notification from bitcoin node
func (s *NotificationApiService) BlockNotify(_ context.Context, blockHash string, mode string) (openApi.ImplResponse, error) {
	m, ok := enum.ParseStringToModeEnum(mode)
	if !ok {
		return openApi.Response(http.StatusBadRequest, nil), errors.New(fmt.Sprintf("Wrong mode: %s", mode))
	}
	s.bitcoinService.HandleBlockNotify(blockHash, m)

	return openApi.Response(http.StatusOK, nil), nil
}

// WalletNotify - New wallet notification from Bitcoin Node
func (s *NotificationApiService) WalletNotify(_ context.Context, txId string, mode string) (openApi.ImplResponse, error) {
	m, ok := enum.ParseStringToModeEnum(mode)
	if !ok {
		return openApi.Response(http.StatusBadRequest, nil), errors.New(fmt.Sprintf("Wrong mode: %s", mode))
	}
	s.bitcoinService.HandleWalletNotify(txId, m)

	return openApi.Response(http.StatusOK, nil), nil
}
